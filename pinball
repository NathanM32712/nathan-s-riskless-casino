<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Pinball Risk Pro</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.19.0/matter.min.js"></script>
  <style>
    body {
      background: #111;
      color: #0cf;
      font-family: sans-serif;
      text-align: center;
      margin: 0;
      padding: 20px;
    }
    canvas {
      background: #222;
      border: 2px solid #444;
      border-radius: 10px;
      margin-top: 20px;
    }
    button {
      background: gold;
      color: #000;
      font-weight: bold;
      border: none;
      border-radius: 6px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      margin: 10px;
    }
    input {
      font-size: 16px;
      padding: 6px;
      width: 100px;
      margin: 10px;
      text-align: center;
    }
    #info {
      font-size: 18px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h1>üé± Pinball Risk Pro</h1>
  <input type="number" id="betInput" placeholder="Enter bet $" min="1" />
  <div id="info">
    Balance: $<span id="balance">0</span><br>
    Bet: $<span id="bet">0.00</span><br>
    Multiplier: √ó<span id="multiplier">1.00</span>
  </div>
  <button onclick="startGame()">‚ñ∂Ô∏è Start</button>
  <button onclick="cashOut()">üí∏ Cash Out</button>
  <button onclick="goBack()">‚¨ÖÔ∏è Back</button>
  <canvas id="canvas" width="400" height="600"></canvas>

  <script>
    const BALANCE_KEY = "slotsBalance";
    let balance = parseFloat(localStorage.getItem(BALANCE_KEY));
    if (isNaN(balance)) {
      balance = 1000;
      localStorage.setItem(BALANCE_KEY, balance);
    }

    let bet = 0.00;
    let multiplier = 1.00;
    let goalHit = false;
    let lost = false;
    let timer = null;
    let started = false;

    const balanceTag = document.getElementById("balance");
    const betTag = document.getElementById("bet");
    const multTag = document.getElementById("multiplier");
    balanceTag.textContent = balance.toFixed(2);

    function startInflation() {
      multiplier = 1.00;
      goalHit = false;
      lost = false;
      timer = setInterval(() => {
        multiplier += 0.05;
        multTag.textContent = multiplier.toFixed(2);
      }, 1000);
    }

    function startGame() {
      if (started) return;
      const betValue = parseFloat(document.getElementById("betInput").value);
      if (isNaN(betValue) || betValue <= 0 || betValue > balance) {
        alert("Invalid bet amount.");
        return;
      }

      started = true;
      bet = betValue;
      balance -= bet;
      localStorage.setItem(BALANCE_KEY, balance);
      balanceTag.textContent = balance.toFixed(2);
      betTag.textContent = bet.toFixed(2);
      Composite.add(engine.world, ball);
      startInflation();
    }

    function cashOut() {
      clearInterval(timer);
      let payout = 0;
      if (goalHit) {
        payout = bet * multiplier;
        balance += payout;
        alert(`üéâ You hit the goal! Won $${payout.toFixed(2)}`);
      } else {
        alert(`‚ùå Missed the goal. Lost your $${bet.toFixed(2)}`);
      }
      localStorage.setItem(BALANCE_KEY, balance);
      balanceTag.textContent = balance.toFixed(2);
      bet = 0.00;
      multiplier = 1.00;
      betTag.textContent = bet.toFixed(2);
      multTag.textContent = multiplier.toFixed(2);
      started = false;
    }

    function goBack() {
      window.open("index.html", "_blank");
      window.close();
    }

    // Matter.js setup
    const { Engine, Render, Runner, Bodies, Body, Composite, Events, Constraint } = Matter;
    const engine = Engine.create();
    const render = Render.create({
      element: document.body,
      canvas: document.getElementById("canvas"),
      engine: engine,
      options: {
        width: 400,
        height: 600,
        wireframes: false,
        background: "#222"
      }
    });

    const ball = Bodies.circle(200, 100, 10, { restitution: 0.8, label: "ball" });
    const ground = Bodies.rectangle(200, 610, 400, 20, { isStatic: true });
    const leftWall = Bodies.rectangle(0, 300, 20, 600, { isStatic: true });
    const rightWall = Bodies.rectangle(400, 300, 20, 600, { isStatic: true });
    const drain = Bodies.rectangle(200, 590, 100, 10, { isStatic: true, label: "drain", render: { fillStyle: "red" } });
    const goal = Bodies.rectangle(200, 50, 60, 10, { isStatic: true, label: "goal", render: { fillStyle: "lime" } });

    const flipperLeft = Bodies.rectangle(120, 500, 60, 10, { label: "flipperLeft" });
    const hingeLeft = Constraint.create({ pointA: { x: 120, y: 500 }, bodyB: flipperLeft, pointB: { x: -30, y: 0 }, stiffness: 1 });

    Composite.add(engine.world, [ground, leftWall, rightWall, drain, goal, flipperLeft, hingeLeft]);

    Events.on(engine, "collisionStart", event => {
      event.pairs.forEach(pair => {
        const labels = [pair.bodyA.label, pair.bodyB.label];
        if (labels.includes("ball") && labels.includes("goal")) goalHit = true;
        if (labels.includes("ball") && labels.includes("drain")) lost = true;
      });
    });

    document.addEventListener("keydown", e => {
      if (e.key === "ArrowLeft") Body.setAngularVelocity(flipperLeft, -1);
    });

    document.addEventListener("click", () => {
      Body.setAngularVelocity(flipperLeft, -1);
    });

    Engine.run(engine);
    Render.run(render);
  </script>
</body>
</html>
